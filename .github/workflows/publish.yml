name: Test and Publish to PyPI

on:
  release:
    types: [published]
  workflow_dispatch:  # Allow manual triggering
  pull_request:  # Test on PRs
  push:
    branches: [main]  # Test on main branch pushes

jobs:
  test:
    name: Test on Python ${{ matrix.python-version }}
    runs-on: ubuntu-latest
    strategy:
      matrix:
        python-version: ['3.8', '3.9', '3.10', '3.11', '3.12']
      fail-fast: false
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Set up Python ${{ matrix.python-version }}
      uses: actions/setup-python@v4
      with:
        python-version: ${{ matrix.python-version }}
    
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -e ".[dev]"
    
    - name: Run comprehensive tests
      run: |
        echo "Running all emoticon_fix tests..."
        python run_all_tests.py
    
    - name: Run pytest suite
      run: |
        echo "Running pytest test suite..."
        pytest test_emoticon_fix/test_pytest_suite.py -v
    
    - name: Test import and basic functionality
      run: |
        python -c "
        from emoticon_fix import emoticon_fix, analyze_sentiment, get_sentiment_score
        assert emoticon_fix('Hello :)') == 'Hello Smile'
        assert get_sentiment_score('Happy :)') > 0
        print('✓ Import and basic functionality tests passed')
        "
    
    - name: Test package installation
      run: |
        pip uninstall -y emoticon-fix || true
        python -m build
        pip install dist/*.whl
        python -c "import emoticon_fix; print(f'✓ Package version: {emoticon_fix.__version__}')"

  build:
    name: Build and publish to PyPI
    runs-on: ubuntu-latest
    needs: test  # Only run if tests pass
    if: github.event_name == 'release'
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.9'
    
    - name: Install build dependencies
      run: |
        python -m pip install --upgrade pip
        pip install build twine
    
    - name: Build package
      run: python -m build
    
    - name: Check distribution
      run: twine check dist/*
    
    - name: Publish to PyPI
      env:
        TWINE_USERNAME: __token__
        TWINE_PASSWORD: ${{ secrets.PYPI_API_TOKEN }}
      run: twine upload dist/*

  test-publish:
    name: Test publish to Test PyPI
    runs-on: ubuntu-latest
    needs: test  # Only run if tests pass
    if: github.event_name == 'workflow_dispatch'
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.9'
    
    - name: Install build dependencies
      run: |
        python -m pip install --upgrade pip
        pip install build twine
    
    - name: Build package
      run: python -m build
    
    - name: Check distribution
      run: twine check dist/*
    
    - name: Publish to Test PyPI
      env:
        TWINE_USERNAME: __token__
        TWINE_PASSWORD: ${{ secrets.TEST_PYPI_API_TOKEN }}
        TWINE_REPOSITORY_URL: https://test.pypi.org/legacy/
      run: twine upload dist/* 